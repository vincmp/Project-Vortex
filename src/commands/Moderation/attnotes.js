// Importa√ß√£o dos construtores necess√°rios para criar comandos slash
const { SlashCommandBuilder } = require('@discordjs/builders');
const { EmbedBuilder } = require('discord.js');

// Exporta√ß√£o do m√≥dulo para utiliza√ß√£o em outros arquivos
module.exports = {
    // Defini√ß√£o dos dados do comando slash
    data: new SlashCommandBuilder()
        .setName('attnotes') // Define o nome do comando
        .setDescription('Mostre o que foi alterado nesta atualiza√ß√£o!') // Define a descri√ß√£o do comando
        // Adiciona op√ß√µes para o comando, como vers√£o, o que foi adicionado, corrigido e removido
        .addStringOption(option =>
            option
                .setName('vers√£o')
                .setDescription('Qual o numero da vers√£o?')
                .setRequired(true))
        .addStringOption(option =>
            option
                .setName('descri√ß√£o')
                .setDescription('Fa√ßa comemtario na att. note')
                .setRequired(true))
        .addStringOption(option =>
            option
                .setName('novo')
                .setDescription('O que foi adicionado?')
                .setRequired(true))
        .addStringOption(option =>
            option
                .setName('corrigido')
                .setDescription('O que foi corrigido?')
                .setRequired(true))
        .addStringOption(option =>
            option
                .setName('removido')
                .setDescription('O que foi removido?')
                .setRequired(true)),

    // Fun√ß√£o para executar o comando
    async execute(interaction, options, client, interactionUser) {
        // Extrai os valores das op√ß√µes do comando
        const ver = interaction.options.getString('vers√£o');
        const desc = interaction.options.getString('descri√ß√£o');
        const neew = interaction.options.getString('novo');
        const edited = interaction.options.getString('corrigido');
        const deleted = interaction.options.getString('removido');

        // Cria um objeto de embed para informar que as notas foram enviadas com sucesso
        let embed1 = new EmbedBuilder()
            .setColor('#d34a4a')
            .setDescription('‚äπ Patch Note enviada com sucesso.');

        // Cria um objeto de embed contendo as notas de atualiza√ß√£o
        let embed2 = new EmbedBuilder()
            .setColor('#d34a4a')
            .setTitle(`**üìù Notas de Atualiza√ß√£o - v${ver}**`)
            .setDescription(`${desc}`)
            .addFields(
                { name: 'üéâ Novidades:', value: `‚äπ ${neew.split(';;').join('\n‚äπ ')}\n` }, // Divide as novidades em linhas
                { name: 'üêõ Corre√ß√µes:', value: `‚äπ ${edited.split(';;').join('\n‚äπ ')}\n` }, // Divide as corre√ß√µes em linhas
                { name: 'üóëÔ∏è Removido:', value: `‚äπ ${deleted.split(';;').join('\n‚äπ ')}\n` }, // Divide os itens removidos em linhas
            )
            .setTimestamp();

        // Responde √† intera√ß√£o do usu√°rio com o embed de confirma√ß√£o
        await interaction.reply({ embeds: [embed1], ephemeral: true });
        // Envia o embed com as notas de atualiza√ß√£o para um canal espec√≠fico no servidor
        await interaction.guild.channels.cache.get('1172865588729753668').send({ embeds: [embed2] });
    }
}
